class Solution {
public:
    //memoization *******
    
    
    
    int fun(int i,int j,string &s1,string &s2, vector<vector<int>>&dp)
{
    //if both exausted then return true;
    if(i<0&&j<0)return true;
    //if s1 get exhausted and s2 is still left it means string s1 does not conain all
    //characters of s2;
    if(i<0&&j>=0)return false;
    //if s2 get exhausted then only possible values
    //in s1 be '**'other wise it will return false
    if(i>=0&&j<0)
    {
        while(i>=0)
        {
            if(s1[i]!='*')return false;
            i--;
        }
        return true;
    }
    if(dp[i][j]!=-1)return dp[i][j];
    
    if(s1[i]==s2[j]||s1[i]=='?')
    return dp[i][j]=fun(i-1,j-1,s1,s2,dp);
   else if(s1[i]=='*')
   {
       return dp[i][j]=(fun(i,j-1,s1,s2,dp)||fun(i-1,j,s1,s2,dp));
   }
   else
   return dp[i][j]=false;
    
    
}
    bool isMatch(string s2, string s1) {
         int l1=s1.size(),l2=s2.size();
     /*  vector<vector<int>>dp(l1+1,vector<int>(l2+1,-1));
       return fun(l1-1,l2-1,s1,s2,dp);*/
        
        //tabulation  
             vector<vector<bool>>dp(l1+1,vector<bool>(l2+1,false));
       dp[0][0]=true;
      /* for(int j=1;j<=l2;j++)
       dp[0][j]=false;*/
       for(int i=1;i<=l1;i++)
       {
           int f=true;
           for(int j=1;j<=i;j++)
           {
              if(s1[j-1]!='*'){
              f=false;
            
               break;
              }
            
           }
           dp[i][0]=f;
        
           
       }
       for(int i=1;i<=l1;i++)
       {
           for(int j=1;j<=l2;j++)
           {
                if(s1[i-1]==s2[j-1]||s1[i-1]=='?')
                dp[i][j]=dp[i-1][j-1];
                else if(s1[i-1]=='*')
                dp[i][j]=(dp[i-1][j]||dp[i][j-1]);
                else
                dp[i][j]=false;
           }
       }
       return dp[l1][l2];
       
       
    
        
        
        
    }
};
